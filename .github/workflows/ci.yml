name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - continuous_integration
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

  lint:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flake8 black

      - name: Run flake8
        run: flake8 .

      - name: Run black (check only)
        run: black --check .

  tests:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          chmod +x ./src/ci_cd/shell/run_test.sh
          ./src/ci_cd/shell/run_test.sh

  build:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker Compose
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/docker-compose
          key: ${{ runner.os }}-docker-compose
          restore-keys: |
            ${{ runner.os }}-docker-compose

      - name: Install Docker Compose (if not cached)
        run: |
          if ! [ -x "$(command -v docker-compose)" ]; then
            echo "Docker Compose not found. Installing..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
          else
            echo "Docker Compose is already cached."
          fi

      - name: Verify Docker Compose Installation
        run: docker-compose --version
      
      - name: Set lowercase repository name
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "Successfully converted repository name to lowercase"

      - name: Build Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_NAME: ghcr.io/${REPO_LC}/assuraimant-web-app
        run: |
          chmod +x ./src/ci_cd/shell/build_docker.sh
          ./src/ci_cd/shell/build_docker.sh $IMAGE_TAG
          echo "Starting to build docker image from the build_docker.sh file"

      - name: Push Docker image to GitHub Container Registry
        run: |
          docker tag assuraimant-web-appp:latest ghcr.io/${REPO_LC}/assuraimant-web-app:${{ github.sha }}
          docker push ghcr.io/${REPO_LC}/assuraimant-web-app:${{ github.sha }}
          echo "Docker image ghcr.io/${REPO_LC}/assuraimant-web-app:${{ github.sha }} has been created and pushed to GHCR."

      - name: Optional Cleanup
        run: |
          docker image prune -f
